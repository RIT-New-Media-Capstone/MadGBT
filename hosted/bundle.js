(()=>{let e,n={},t={};const l=()=>{window.scrollTo(0,0)},s=(e,n)=>{const t=n||(e=>e),l={};for(let n=0;n<e.length;n++){const s=e[n];l[s]=document.querySelector(`#${t(s)}`)}return l},o=e=>{n[e]&&(Object.keys(n).forEach((t=>{n[t].classList.toggle("activeScreen",t===e)})),l())},a=e=>{t.fillInBlanksFormBlanks.innerHTML=e.map(((e,n)=>`<div><label for="${n}">${e}:</label><input type="text" name="${n}"></div>`)).join(""),o("fillInBlanks")},r=n=>{console.log("working"),n.preventDefault();const s=[];let o=!0;t.fillInBlanksFormBlanks.querySelectorAll("input").forEach((e=>{const n=e.value;s.push(n),n.length>0?e.classList.remove("formMissedRequirement"):(e.classList.add("formMissedRequirement"),o=!1)})),o?e(s):l()};window.onload=async()=>{const l=await async function(){try{fetch("/generate-story").then((e=>e.json())).then((e=>e.content)).catch((e=>{console.log(e)}))}catch(e){console.log(e)}}();console.log(l),n=s(["start","waiting","fillInBlanks","results"],(e=>`${e}Screen`)),t=s(["startGameButton","errorMessage","waitingMessage","fillInBlanksForm","fillInBlanksFormBlanks","finishedStory","playAgainButton"]),t.fillInBlanksForm.addEventListener("submit",r),t.startGameButton.onclick=()=>a(["Verb","Place","Thing"]),t.playAgainButton.onclick=()=>a(["Verb","Place","Thing"]),e=e=>{const n=e.map((e=>`<span class="filledInWord">${e}</span>`));var l;l=`Let's all ${n[0]} to the ${n[1]}, let's all ${n[0]} to the ${n[1]}. Let's all ${n[0]} to the ${n[1]}, to get ourselves a ${n[2]}.`,t.finishedStory.innerHTML=l,o("results")}}})();